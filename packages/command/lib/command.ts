import { BaseCommand } from './base-command.ts';
import { IParseResult } from './types.ts';

/**
 * A command with pre configured command's and option's:
 *
 *  - command's:
 *      help            Output's autogenerated help.
 *      completions     Output's autogenerated shell completion script for bash and zsh.
 *  - option's:
 *      -h, --help      Output's autogenerated help.
 *      -V, --version   Output's version number
 */
export class Command<O = any, A extends Array<any> = any> extends BaseCommand<O, A> {

    private hasDefaults: Boolean = false;

    public parse( args: string[] = Deno.args, dry?: boolean ): Promise<IParseResult<O, A>> {
        this.registerDefaults();
        return super.parse( args, dry );
    }

    private registerDefaults = (): this => {
        if ( this.getParent() || this.hasDefaults ) {
            return this;
        }
        this.hasDefaults = true;
        this.reset()
            .option( '-h, --help', 'Show this help.', {
                standalone: true,
                global: true,
                action: function ( this: BaseCommand ) {
                    this.help();
                    Deno.exit( 0 );
                }
            } )
            .option( '-V, --version', 'Show the version number for this program.', {
                standalone: true,
                action: () => {
                    this.log( this.getVersion() );
                    Deno.exit( 0 );
                }
            } );

        return this;
    };
}
